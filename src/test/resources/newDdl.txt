###############################################################################
# File containing segments of new DDL for test input.
#
# Format:
# '#' = line comment, skipped when file is read.
# '== TEST NAME ' = section name/separator.
#                   Tests are run on each section individually.
#                   "TEST NAME" should be the same on all 3 DDL files
# '--' DDL line comment - skipped by parser.
###############################################################################
== TEST 1 simple add table and index

create table test1 ( col1 int64, col2 int64 ) primary key (col1);
create table test2 ( col1 int64, col2 int64 ) primary key (col1);
create index index1 on test1 (col1);
create index index2 on test2 (col1);

== TEST 2 drop table and index (index should be dropped first)

create table test1 ( col1 int64, col2 int64 ) primary key (col1);
create index index1 on test1 (col1);

== TEST 3 update table and index

create table test1 ( col1 int64, col2 int64 ) primary key (col1);
create table test2 ( col1 int64, col2 int64, col3 timestamp NOT NULL OPTIONS (allow_commit_timestamp=true) ) primary key (col1);
create index index1 on test1 (col1);
create index index2 on test2 (col3);

== TEST 4 multiple tables, indexes, different orders - verify creation order.

create table test2 ( col1 int64, newcol2 string(max)) primary key (col1);
create table test3 ( col1 int64, col2 int64, col3 timestamp ) primary key (col1, col2), interleave in parent test2;
create index index2 on test2 (col1 desc);

create table test1 (
    col1 int64,
    col2 int64 NOT NULL,
    col3 STRING(MAX),
    col4 ARRAY<STRING(200)>,
    col5 float64 not null,
    col6 BYTES(100))
primary key (col1 desc);
create index index1 on test1 (col2);

# attempt to break by using different table name order.
create table cccparent (col1 int64) primary key (col1);
create table bbbchild1 (col1 int64, col2 int64) primary key (col1, col2), interleave in parent cccparent;
create table aaachild2 (col1 int64, col2 int64, col3 int64) primary key (col1, col2, col3), interleave in parent bbbchild1;

== TEST 5 verify table deletion order - important for interleaved

create table test1 (
    col1 int64,
    col2 int64 NOT NULL,
    col3 STRING(MAX),
    col4 ARRAY<STRING(200)>,
    col5 float64 not null,
    col6 BYTES(100))
primary key (col1 desc);
create index index1 on test1 (col2);

== TEST 6 case-sensitive table names

create table TEST1 (
    col1 int64)
primary key (col1);

== TEST 7 case-sensitive column names

create table test1 (col1 String(100), COL2 int64) primary key (col1);

== TEST 8 case-sensitive index names

create table test1 (
    col1 int64,
    col2 int64 NOT NULL
)
primary key (col1);
create index INDEX1 on test1 (col2);

== TEST 9 add foreign key in table

create table test1 (
    col1 int64,
    col2 int64 NOT NULL,
    constraint fk_in_table foreign key (col2) references othertable(othercol)
)
primary key (col1);

== TEST 10 add foreign key via alter statement

create table test1 (
    col1 int64,
    col2 int64 NOT NULL
)
primary key (col1);

alter table test1 add constraint fk_in_alter foreign key (col2) references othertable(othercol);

== TEST 11 modify foreign key in table

create table test1 (
    col1 int64,
    col2 int64 NOT NULL,
    constraint fk_in_table foreign key (col1) references othertable(othercol1)
)
primary key (col1);

== TEST 12 modify foreign key via alter statement

create table test1 (
    col1 int64,
    col2 int64 NOT NULL
)
primary key (col1);

alter table test1 add constraint fk_in_alter foreign key (col1) references othertable(othercol1);


== TEST 13 drop foreign key in table

create table test1 (
    col1 int64,
    col2 int64 NOT NULL
)
primary key (col1);

== TEST 14 drop foreign key via alter statement

create table test1 (
    col1 int64,
    col2 int64 NOT NULL
)
primary key (col1);

== TEST 15 Verify modification ordering

create table test1 (
    col1 int64,
    col2 int64 NOT NULL,
    col3 int64,
    constraint fk_in_test1 foreign key (col3) references othertable(othercol),
    constraint ch_in_test1 check (col1=col3 and col1 > 100 and col2 < -50)
)
primary key (col1);
create index index1 on test1 (col3);

create table test3 (
    col1 int64)
primary key (col1);
alter table test3 add constraint fk_in_test3 foreign key (col3) references othertable(othercol);
alter table test3 add constraint ch_in_test3 check (col1=col3 and col1 > 100 and col2 < -50);


== TEST 16 add check constraint via alter statement

create table test1 (
    col1 int64,
    col2 int64 NOT NULL
)
primary key (col1);

alter table test1 add constraint ch_in_alter check (col1=col2 and col1 > 100 and col2 < -50);

== TEST 17 modify check constraint in table

create table test1 (
    col1 int64,
    col2 int64 NOT NULL,
    constraint ch_in_table check (col1=col2 and col1 > 200 and col2 < -500)
)
primary key (col1);

== TEST 18 modify check constraint via alter statement

create table test1 (
    col1 int64,
    col2 int64 NOT NULL
)
primary key (col1);

alter table test1 add constraint ch_in_alter check (col1=col2 and col1 > 200 and col2 < -500);

== TEST 19 drop check constraint in table

create table test1 (
    col1 int64,
    col2 int64 NOT NULL
)
primary key (col1);

== TEST 20 drop check constraint via alter statement

create table test1 (
    col1 int64,
    col2 int64 NOT NULL
)
primary key (col1);

== TEST 21 add generated col in table

create table test_gen (
  col1 int64,
  col2 int64,
  col3 int64 as ( col1 * col2 * 2) STORED
) primary key (col1);

== TEST 22 drop generated col in table

create table test_gen (
  col1 int64,
  col2 int64,
) primary key (col1);

== TEST 23 no modification of foreign key in table

create table test1 (
    col1 int64,
    constraint fk_in_table foreign key (col1) references othertable(othercol1)
)
primary key (col1);

== TEST 24 add foreign key via create table

CREATE TABLE test_fkey (
  col1 INT64,
  col2 INT64,
  CONSTRAINT fk_col1 FOREIGN KEY (col1) REFERENCES test1(col1)
) PRIMARY KEY (col1 ASC)

== TEST 25 move foreign key out of create table

create table test1 (
    col1 int64,
    col2 int64 NOT NULL,
)
primary key (col1);
alter table test1 add constraint fk_in_table foreign key (col1) references othertable(othercol1)

== TEST 26 unchanged Row Deletion Policy

create table test1 (
    col1 int64,
    time timestamp
)
primary key (col1),
row deletion policy (OLDER_THAN ( timestamp_column, INTERVAL 10 DAY ));

== TEST 27 unchanged Row Deletion Policy - moved to ALTER

create table test1 (
    col1 int64,
    time timestamp
)
primary key (col1);

ALTER table test1 ADD row deletion policy (OLDER_THAN ( timestamp_column, INTERVAL 10 DAY ));

== TEST 28 drop Row Deletion Policy

create table test1 (
    col1 int64,
    time timestamp
)
primary key (col1)

== TEST 29 drop Row Deletion Policy added by ALTER

create table test1 (
    col1 int64,
    time timestamp
)
primary key (col1);

== TEST 30 Add Row Deletion Policy

create table test1 (
    col1 int64,
    time timestamp
)
primary key (col1),
row deletion policy (OLDER_THAN ( timestamp_column, INTERVAL 10 DAY ));

== TEST 31 Add Row Deletion Policy by Alter

create table test1 (
    col1 int64,
    time timestamp
)
primary key (col1);
alter table test1 ADD row deletion policy (OLDER_THAN ( timestamp_column, INTERVAL 10 DAY ))

== TEST 32 Change Row Deletion Policy

create table test1 (
    col1 int64,
    time timestamp
)
primary key (col1),
row deletion policy (OLDER_THAN ( other_column, INTERVAL 20 DAY ));

== TEST 32 Change Row Deletion Policy added by Alter

create table test1 (
    col1 int64,
    time timestamp
)
primary key (col1);

Alter table test1 add row deletion policy (OLDER_THAN ( other_column, INTERVAL 20 DAY ));

== TEST 33 Drop table with Row Deletion Policy

# nothing here

== TEST 34 unchanged default value

create table test1 (
    col1 int64,
    created_at timestamp default (CURRENT_TIMESTAMP())
)
primary key (col1)

== TEST 34 add default value

create table test1 (
    col1 int64,
    created_at timestamp  default (CURRENT_TIMESTAMP())
)
primary key (col1)

== TEST 35 drop default value

create table test1 (
    col1 int64,
    created_at timestamp
)
primary key (col1)

== TEST 36 modify default value

create table test1 (
    col1 int64,
    created_at timestamp  default (TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 DAY ))
)
primary key (col1)

== TEST 37 add a new col with a default value

create table test1 (
    col1 int64,
    created_at timestamp  default (CURRENT_TIMESTAMP()),
    new_col String(MAX) default ("Hello World")
)
primary key (col1)

== TEST 38 add a new table with a default value

create table test1 (
    col1 int64,
    created_at timestamp NOT NULL default (CURRENT_TIMESTAMP()) OPTIONS (allow_commit_timestamp = true)
)
primary key (col1)

== TEST 39 Unchanged database options using multiple statements

ALTER DATABASE dbname SET OPTIONS(nothing=NULL, othervalue=123);
ALTER DATABASE dbname SET OPTIONS(othervalue=456);
ALTER DATABASE dbname SET OPTIONS(hello='world');

== TEST 40 adding database options

ALTER DATABASE dbname SET OPTIONS(nothing=NULL, othervalue=123);
ALTER DATABASE dbname SET OPTIONS(othervalue=456);
ALTER DATABASE dbname SET OPTIONS(hello='world');

== TEST 41 changing and removing database options

ALTER DATABASE dbname SET OPTIONS(hello='world', othervalue=456);

== TEST 42 add foreign key in table with delete cascade

create table test1 (
    col1 int64,
    col2 int64 NOT NULL,
    constraint fk_in_table foreign key (col2) references othertable(othercol) ON DELETE CASCADE
)
primary key (col1);

== TEST 43 add foreign key in table with delete no action

create table test1 (
    col1 int64,
    col2 int64 NOT NULL,
    constraint fk_in_table foreign key (col2) references othertable(othercol) ON DELETE NO ACTION
)
primary key (col1);

==
